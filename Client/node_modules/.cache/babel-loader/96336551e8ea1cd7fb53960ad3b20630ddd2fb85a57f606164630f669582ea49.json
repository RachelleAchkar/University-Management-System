{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\UniversityManagementSystem\\\\university-management-system\\\\src\\\\components\\\\Form\\\\AddGrade.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './Forms.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddGrade = ({\n  onGradeSubmit,\n  onClose\n}) => {\n  _s();\n  var _location$state, _location$state2;\n  const [selectedCourse, setSelectedCourse] = useState(null);\n  const [grade, setGrade] = useState('');\n  const [courses, setCourses] = useState([]);\n  const location = useLocation();\n  const student = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.student;\n  const studentId = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.studentId;\n\n  // Fetch courses for the student\n  useEffect(() => {\n    const fetchCourses = async () => {\n      if (!studentId) {\n        console.error('Student ID is missing or incorrect');\n        return;\n      }\n      try {\n        // Try to fetch from localStorage first\n        const storedCourses = localStorage.getItem(`courses_${studentId}`);\n        if (storedCourses) {\n          setCourses(JSON.parse(storedCourses)); // Use stored data if available\n        } else {\n          // Fetch from the backend if not in localStorage\n          const response = await fetch(`http://localhost:8080/enrollment/${studentId}`);\n          if (response.ok) {\n            const data = await response.json();\n            setCourses(data);\n            localStorage.setItem(`courses_${studentId}`, JSON.stringify(data)); // Store in localStorage\n          } else {\n            console.error('Failed to fetch courses');\n            setCourses([]);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching courses:', error);\n      }\n    };\n    fetchCourses();\n  }, [studentId]);\n  const handleCourseClick = course => {\n    setSelectedCourse(course);\n    setGrade('');\n  };\n  const handleGradeSubmit = async () => {\n    if (!grade || isNaN(grade) || grade < 0 || grade > 100) {\n      alert('Please enter a valid grade between 0 and 100.');\n      return;\n    }\n    try {\n      // Create a new grade object\n      const updatedCourses = courses.map(course => {\n        if (course.courseID === selectedCourse.courseID) {\n          return {\n            ...course,\n            grade: parseFloat(grade)\n          }; // Update the grade for the selected course\n        }\n        return course;\n      });\n\n      // Update localStorage with the new course data\n      localStorage.setItem(`courses_${studentId}`, JSON.stringify(updatedCourses));\n\n      // Update the local state\n      setCourses(updatedCourses);\n\n      // call an API to save the grade on the backend\n      const gradeUpdatePayload = [{\n        studentId: studentId,\n        courseId: selectedCourse.courseID,\n        grade: parseFloat(grade) // Use parseFloat to allow decimal grades\n      }];\n      const response = await fetch(`http://localhost:8080/enrollment/updateEnrollmentGrade/${selectedCourse.courseID}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(gradeUpdatePayload)\n      });\n      if (response.ok) {\n        alert(`Grade for ${selectedCourse.courseName} updated successfully!`);\n        setSelectedCourse(null); // Close the popup\n      } else {\n        alert('Failed to update grade. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error updating grade:', error);\n      alert('An error occurred while updating the grade.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grades for \", student === null || student === void 0 ? void 0 : student.firstname, \" \", student === null || student === void 0 ? void 0 : student.lastname]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"course-boxes\",\n        children: courses.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No courses found for this student.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this) : courses.map(course => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"course-box\",\n          onClick: () => handleCourseClick(course),\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: course.courseName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this), course.grade !== undefined && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Grade: \", course.grade]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 48\n          }, this)]\n        }, course.courseID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), selectedCourse && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-popup\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Add Grade for \", selectedCourse.courseName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Enter Grade (0-100)\",\n          value: grade,\n          onChange: e => setGrade(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleGradeSubmit,\n          children: \"Submit Grade\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedCourse(null),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(AddGrade, \"fG4ReL7s52dyZAESm8nJ6DluGnw=\", false, function () {\n  return [useLocation];\n});\n_c = AddGrade;\nexport default AddGrade;\nvar _c;\n$RefreshReg$(_c, \"AddGrade\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","jsxDEV","_jsxDEV","AddGrade","onGradeSubmit","onClose","_s","_location$state","_location$state2","selectedCourse","setSelectedCourse","grade","setGrade","courses","setCourses","location","student","state","studentId","fetchCourses","console","error","storedCourses","localStorage","getItem","JSON","parse","response","fetch","ok","data","json","setItem","stringify","handleCourseClick","course","handleGradeSubmit","isNaN","alert","updatedCourses","map","courseID","parseFloat","gradeUpdatePayload","courseId","method","headers","body","courseName","className","children","firstname","lastname","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","undefined","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/UniversityManagementSystem/university-management-system/src/components/Form/AddGrade.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './Forms.css';\r\nconst AddGrade = ({ onGradeSubmit, onClose }) => {\r\n  const [selectedCourse, setSelectedCourse] = useState(null); \r\n  const [grade, setGrade] = useState(''); \r\n  const [courses, setCourses] = useState([]);\r\n  const location = useLocation();\r\n  const student = location.state?.student;\r\n  const studentId = location.state?.studentId;\r\n\r\n  // Fetch courses for the student\r\n  useEffect(() => {\r\n    const fetchCourses = async () => {\r\n      if (!studentId) {\r\n        console.error('Student ID is missing or incorrect');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Try to fetch from localStorage first\r\n        const storedCourses = localStorage.getItem(`courses_${studentId}`);\r\n        if (storedCourses) {\r\n          setCourses(JSON.parse(storedCourses)); // Use stored data if available\r\n        } else {\r\n          // Fetch from the backend if not in localStorage\r\n          const response = await fetch(`http://localhost:8080/enrollment/${studentId}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setCourses(data); \r\n            localStorage.setItem(`courses_${studentId}`, JSON.stringify(data)); // Store in localStorage\r\n          } else {\r\n            console.error('Failed to fetch courses');\r\n            setCourses([]);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching courses:', error);\r\n      }\r\n    };\r\n\r\n    fetchCourses();\r\n  }, [studentId]);\r\n\r\n  const handleCourseClick = (course) => {\r\n    setSelectedCourse(course);\r\n    setGrade('');\r\n  };\r\n\r\n  const handleGradeSubmit = async () => {\r\n    if (!grade || isNaN(grade) || grade < 0 || grade > 100) {\r\n      alert('Please enter a valid grade between 0 and 100.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Create a new grade object\r\n      const updatedCourses = courses.map((course) => {\r\n        if (course.courseID === selectedCourse.courseID) {\r\n          return { ...course, grade: parseFloat(grade) }; // Update the grade for the selected course\r\n        }\r\n        return course;\r\n      });\r\n\r\n      // Update localStorage with the new course data\r\n      localStorage.setItem(`courses_${studentId}`, JSON.stringify(updatedCourses));\r\n\r\n      // Update the local state\r\n      setCourses(updatedCourses);\r\n\r\n      // call an API to save the grade on the backend\r\n      const gradeUpdatePayload = [\r\n        {\r\n          studentId: studentId,\r\n          courseId: selectedCourse.courseID,\r\n          grade: parseFloat(grade), // Use parseFloat to allow decimal grades\r\n        },\r\n      ];\r\n\r\n      const response = await fetch(`http://localhost:8080/enrollment/updateEnrollmentGrade/${selectedCourse.courseID}`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(gradeUpdatePayload),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(`Grade for ${selectedCourse.courseName} updated successfully!`);\r\n        setSelectedCourse(null); // Close the popup\r\n      } else {\r\n        alert('Failed to update grade. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating grade:', error);\r\n      alert('An error occurred while updating the grade.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal\">\r\n        <h3>\r\n          Grades for {student?.firstname} {student?.lastname}\r\n        </h3>\r\n        <div className=\"course-boxes\">\r\n          {courses.length === 0 ? (\r\n            <p>No courses found for this student.</p>\r\n          ) : (\r\n            courses.map((course) => (\r\n              <div\r\n                key={course.courseID}\r\n                className=\"course-box\"\r\n                onClick={() => handleCourseClick(course)}\r\n              >\r\n                <p>{course.courseName}</p>\r\n                {course.grade !== undefined && <p>Grade: {course.grade}</p>}\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n       \r\n      </div>\r\n\r\n      {/* Grade Input Popup */}\r\n      {selectedCourse && (\r\n        <div className=\"score-popup\">\r\n          <div className=\"score-popup-content\">\r\n            <h4>Add Grade for {selectedCourse.courseName}</h4>\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Enter Grade (0-100)\"\r\n              value={grade}\r\n              onChange={(e) => setGrade(e.target.value)}\r\n            />\r\n            <button onClick={handleGradeSubmit}>Submit Grade</button>\r\n            <button onClick={() => setSelectedCourse(null)}>Cancel</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddGrade;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}